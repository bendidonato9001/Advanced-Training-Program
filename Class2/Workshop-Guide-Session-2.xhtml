<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><!--This file was converted to xhtml by OpenOffice.org - see http://xml.openoffice.org/odf2xhtml for more info.--><head profile="http://dublincore.org/documents/dcmi-terms/"><meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8"/><title xml:lang="en-US">- no title specified</title><meta name="DCTERMS.title" content="" xml:lang="en-US"/><meta name="DCTERMS.language" content="en-US" scheme="DCTERMS.RFC4646"/><meta name="DCTERMS.source" content="http://xml.openoffice.org/odf2xhtml"/><meta name="DCTERMS.creator" content="Ben Dale"/><meta name="DCTERMS.issued" content="2016-07-14T23:25:38.44" scheme="DCTERMS.W3CDTF"/><meta name="DCTERMS.contributor" content="Ben Dale"/><meta name="DCTERMS.modified" content="2016-10-14T17:04:08.09" scheme="DCTERMS.W3CDTF"/><meta name="DCTERMS.provenance" content="" xml:lang="en-US"/><meta name="DCTERMS.subject" content="," xml:lang="en-US"/><link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" hreflang="en"/><link rel="schema.DCTERMS" href="http://purl.org/dc/terms/" hreflang="en"/><link rel="schema.DCTYPE" href="http://purl.org/dc/dcmitype/" hreflang="en"/><link rel="schema.DCAM" href="http://purl.org/dc/dcam/" hreflang="en"/><style type="text/css">
	@page {  }
	table { border-collapse:collapse; border-spacing:0; empty-cells:show }
	td, th { vertical-align:top; font-size:12pt;}
	h1, h2, h3, h4, h5, h6 { clear:both }
	ol, ul { margin:0; padding:0;}
	li { list-style: none; margin:0; padding:0;}
	<!-- "li span.odfLiEnd" - IE 7 issue-->
	li span. { clear: both; line-height:0; width:0; height:0; margin:0; padding:0; }
	span.footnodeNumber { padding-right:1em; }
	span.annotation_style_by_filter { font-size:95%; font-family:Arial; background-color:#fff000;  margin:0; border:0; padding:0;  }
	* { margin:0;}
	.P1 { font-size:12pt; font-family:Times New Roman; writing-mode:page; text-align:center ! important; font-weight:bold; }
	.P10 { font-size:12pt; font-family:Times New Roman; writing-mode:page; text-align:left ! important; background-color:#6666ff; font-weight:normal; }
	.P2 { font-size:12pt; font-family:Times New Roman; writing-mode:page; text-align:left ! important; font-weight:normal; }
	.P3 { font-size:16pt; font-family:Times New Roman; writing-mode:page; }
	.P4 { font-size:16pt; font-family:Times New Roman; writing-mode:page; text-align:center ! important; }
	.P6 { font-size:12pt; font-family:Times New Roman; writing-mode:page; text-align:left ! important; }
	.P7 { font-size:12pt; font-family:Times New Roman; writing-mode:page; text-align:left ! important; font-weight:bold; }
	.P8 { font-size:12pt; font-family:Times New Roman; writing-mode:page; text-align:left ! important; background-color:#ff99ff; font-weight:normal; }
	.P9 { font-size:12pt; font-family:Times New Roman; writing-mode:page; text-align:left ! important; background-color:#6666ff; }
	.Internet_20_link { color:#000080; text-decoration:underline; }
	.T1 { font-weight:normal; }
	.T2 { font-weight:bold; }
	<!-- ODF styles with no properties representable as CSS -->
	.Numbering_20_Symbols { }
	</style></head><body dir="ltr" style="max-width:8.5in;margin-top:0.7874in; margin-bottom:0.7874in; margin-left:0.7874in; margin-right:0.7874in; "><p class="P3"> </p><p class="P4">Intelligent Systems Club:</p><p class="P4">Rpi Workshop</p><p class="P4">Session 2:</p><p class="P1"> </p><p class="P7">Setup</p><p class="P2">Configure Putty for “One Click Login” in <a href="http://superuser.com/questions/44106/is-there-a-way-to-auto-login-in-putty-with-a-password/44117" class="Internet_20_link">this link</a></p><p class="P2">Install Netbeans.</p><p class="P6"><span class="T1">Configure Netbeans for remote build in </span><a href="http://www.raspberry-projects.com/pi/programming-in-c/compilers-and-ides/netbeans-windows/creating-a-new-project" class="Internet_20_link"><span class="T1">this link</span></a><span class="T1">. Use “root” for username and “root” for password.</span> </p><p class="P8">NOTE: When configuring the Netbeans project, under “Build-&gt;Linker-&gt;Additional Library Directories” add “/usr/local/lib” and under “Libaries” choose “Add Option...”  and paste “-lopencv_world”. Under “Build-&gt;C++ Compiler-&gt;Include Directories” add “/usr/local/include”.</p><p class="P2"> </p><p class="P7">Part 1: Basic C++</p><p class="P6">So you wanna learn C++? OK here we go.</p><p class="P6">C++ is a great language to master for many reasons which are named <a href="https://www.quora.com/What-is-the-advantage-of-learning-C++" class="Internet_20_link">here</a>. The main reason I'd highlight is the first mentioned in the article, where the mastery of C++ makes learning many other languages trivial in comparison. </p><p class="P7">Syntax:</p><p class="P6">The most useless possible c++ is given below:</p><p class="P9">int main () {}</p><p class="P6">and is also the minimal amount of code required for ANY C++ program.</p><p class="P6">“int” is the return type of the function called “main”, with no parameters “()” and does nothing {}.</p><p class="P6">Now lets make the program do something;</p><p class="P9">int main () </p><p class="P9">{</p><p class="P9"><span> int a = 3;</span></p><p class="P9"><span> int b = 2;</span></p><p class="P9"><span> return a + b;</span></p><p class="P9">}</p><p class="P6">The program now returns “5” instead of 0. “int” is the declared type of variable named “a”, as is the same with the variable named “b”. Minimal of one space is required between types and names in C++ but not operators.  “+” and “=” are two examples of operators. <a href="http://www.tutorialspoint.com/cplusplus/cpp_operators.htm" class="Internet_20_link">Here</a> is a list of C++ operators. The semi-colon “;” is part of C++ syntax tells the compiler when you are done doing SOMETHING in code. </p><p class="P6">Now lets take a more complex example:</p><p class="P9">int main () </p><p class="P9">{</p><p class="P9"><span> int a = 3;</span></p><p class="P9"><span> int b = 2;</span></p><p class="P9"><span> return a + b;</span></p><p class="P9">}</p><p class="P7">Declaration vs Initialization</p><p class="P6"><span class="T1">A variable is declared explicitly by some type, whether it be a primitive data type such as “int” or “float”, or a more complex type such as “int*” or “Rabbit”, where “int*” declares a pointer that points to the type int, and “Rabbit” might be a class or struct. A variable may also be initialized when it is declared. In the previous example we see this happen twice with the variables “a” and “b”. It is </span><span class="T1">important to distinguish between declaration and initialization because the compiler will always force you declare what type a variable is (because C++ is statically typed) , but won't necessarily force you to initialize every variable you declare (depends on compiler settings). </span></p><p class="P2"> </p><p class="P2">For example:</p><p class="P10">int add()</p><p class="P10">{</p><p class="P10">    int a;</p><p class="P10">    int b;</p><p class="P10">    return a + b;  </p><p class="P10">}</p><p class="P10">int main () </p><p class="P10">{</p><p class="P10">    return add();</p><p class="P10">}</p><p class="P6"><span class="T1">Here we add a function called “add” with the return type “int”, and then call it in our main function by invoking it (adding the parentheses after the function name). Invoking a function is how we call and pass parameters to our function. Right now the code takes two </span><span class="T2">UNINITIALIZED </span><span class="T1"> variables and returns their summation. This is dangerous because the resulting value could be anything, out of our control. </span></p><p class="P2">A non-dangerous program example:</p><p class="P10">int add(int a, int b)</p><p class="P10">{</p><p class="P10">    return a + b;  </p><p class="P10">}</p><p class="P10">int main () </p><p class="P10">{</p><p class="P10">    int c = add(4,5);</p><p class="P10">    return c;</p><p class="P10">}</p><p class="P2">Here we initialized the variable “c” with the return value from the add function.</p><p class="P7">Classes</p><p class="P10">class Integer {</p><p class="P10">public:</p><p class="P10">    Integer(int x1)// constructor</p><p class="P10">    {</p><p class="P10">        x = x1;</p><p class="P10">    }</p><p class="P10">    int add(int y)</p><p class="P10">    {</p><p class="P10">        return x + y;</p><p class="P10">    }</p><p class="P10">    int x;</p><p class="P10">};</p><p class="P10">int main () </p><p class="P10">{</p><p class="P10">    Integer a(3);</p><p class="P10">    Integer b(4);</p><p class="P10">    int c = a.add(b);</p><p class="P10">    return c;</p><p class="P10">}</p><p class="P2"> </p><p class="P2">In this example we have a class called “Integer” with two constructors, and two members. The first constructor is called the default constructor, or a constructor that is called with no parameters. The second constructor is called when we pass one parameter, an int variable “x1”. There is some a label called “public:”. Don't worry about this for now, this is used for inheritance, along with the “private” and “protected” labels. For now public shares the function of a public restroom, where anyone can take a dump in them. So why classes? Is this useful? Right now the answer is now, the class Integer offers no new functionality I didn't have before, the Integer class just makes the program more confusing from a syntax point of view. Let's change that. </p><p class="P10">class ComplexNumber {</p><p class="P10">public:</p><p class="P10">    float r,i; // real, imaginary</p><p class="P10">    ComplexNumber() {}</p><p class="P10">    ComplexNumber (float r1, float i1)</p><p class="P10">    {</p><p class="P10">        r = r1; i = i1;</p><p class="P10">    }</p><p class="P10">    ComplexNumber operator+(const ComplexNumber&amp; c)</p><p class="P10">    {</p><p class="P10">        ComplexNumber newcomplexnumber;</p><p class="P10">        newcomplexnumber.r = this-&gt;r + c.r;</p><p class="P10">        newcomplexnumber.i = this-&gt;i + c.i;</p><p class="P10">        return newcomplexnumber;</p><p class="P10">    }</p><p class="P10">};</p><p class="P10">int main () </p><p class="P10">{</p><p class="P10">    ComplexNumber n1(4,5);</p><p class="P10">    ComplexNumber n2(6,10);</p><p class="P10">    ComplexNumber n3 = n1 + n2;</p><p class="P10">    return (int)n3.r;</p><p class="P10">}</p><p class="P2">Here is defined a class for handling complex numbers found in mathematics. Since it a user-defined type, we have complete control over the behavior on how our class works. One those behaviors is the “+” operator. What is done here is called operator overloading, where we define new behavior for a previously undefined type in C++.  Under “ComplexNumber operator+(const ComplexNumber&amp; c),</p><p class="P2">what is happening is first we constructor the object to be returned “newcomplexnumber”. “this” refers to the particular class we are currently inside of during run time. The parameter “c” is the class on the right hand side, which in this particular case would be “n2”;</p><p class="P2"> </p><p class="P7">Part 2: Template Programming</p><p class="P2">Open <a href="https://www.tutorialspoint.com/cplusplus/cpp_templates.htm" class="Internet_20_link">this</a> tutorial for explanation. </p><p class="P2"> </p><p class="P2"> </p><p class="P2"> </p><p class="P2"> </p><p class="P2"> </p></body></html>